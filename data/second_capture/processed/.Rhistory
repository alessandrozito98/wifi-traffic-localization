sum(fit == 2)
sum(fit == 3)
sum(fit == 4)
sum(fit == 5)
cluster1 <- forpc[fit == 4,]
cluster1
freq1 <- mutation_frequencies_bis(cluster1)
freq1 <- freq1[match(freq$mutation, freq1$mutation),]
X11()
par(mar=c(10,5,10,5))
barplot(height = freq1$frequency, names = freq1$mutation, las = 2, ylab="mutation percentage", main="Barplot cluster 4 in AY.103")
# Barplot with percentages of lineages (sizes)
sum(fit == 1)
sum(fit == 2)
sum(fit == 3)
sum(fit == 4)
par(mar=c(10,5,10,5))
barplot(height = freq1$frequency, names = freq1$mutation, las = 2, ylab="mutation percentage", main="Barplot cluster 1 in AY.103")
cluster1 <- forpc[fit == 2,]
cluster1
freq1 <- mutation_frequencies_bis(cluster1)
par(mar=c(10,5,10,5))
cluster1 <- forpc[fit == 2,]
par(mar=c(10,5,10,5))
barplot(height = freq1$frequency, names = freq1$mutation, las = 2, ylab="mutation percentage", main="Barplot cluster 1 in AY.103")
cluster1 <- forpc[fit == 2,]
cluster1 <- forpc[fit == 2,]
freq1 <- mutation_frequencies_bis(cluster1)
freq1 <- freq1[match(freq$mutation, freq1$mutation),]
par(mar=c(10,5,10,5))
barplot(height = freq1$frequency, names = freq1$mutation, las = 2, ylab="mutation percentage", main="Barplot cluster 1 in AY.103")
cluster1 <- forpc[fit == 2,]
cluster1
freq1 <- mutation_frequencies_bis(cluster1)
freq1 <- freq1[match(freq$mutation, freq1$mutation),]
barplot(height = freq1$frequency, names = freq1$mutation, las = 2, ylab="mutation percentage", main="Barplot cluster 2 in AY.103")
cluster1 <- forpc[fit == 2,]
freq1 <- mutation_frequencies_bis(cluster1)
freq1 <- freq1[match(freq$mutation, freq1$mutation),]
par(mar=c(10,5,10,5))
barplot(height = freq1$frequency, names = freq1$mutation, las = 2, ylab="mutation percentage", main="Barplot cluster 2 in AY.103")
cluster1 <- forpc[fit == 1,]
freq1 <- mutation_frequencies_bis(cluster1)
freq1 <- freq1[match(freq$mutation, freq1$mutation),]
par(mar=c(10,5,10,5))
barplot(height = freq1$frequency, names = freq1$mutation, las = 2, ylab="mutation percentage", main="Barplot cluster 1 in AY.103")
# Barplot with percentages of lineages (sizes)
sum(fit == 1)
View(ay103_topk)
binmatrix <- ay103_clust
binmatrix <- binmatrix[,-1]
totalMutations <- as.data.frame(names(binmatrix))
df_for_rules <- matrix(nrow=nrow(binmatrix),ncol=col(binmatrix))
names <- colnames(binmatrix)
for(i in 1:nrow(binmatrix)) {
for(j in 1:length(names)) {
if(binmatrix[i,j] == 1)
df_for_rules[i,j] = names[j]
}
}
names <- colnames(binmatrix)
View(binmatrix)
binmatrix <- binmatrix[,-1]
binmatrix <- binmatrix[,-1:3]
totalMutations <- as.data.frame(names(binmatrix))
binmatrix <- binmatrix[,!(names(binmatrix) %in% mutationsToDrop)]
df_for_rules <- matrix(nrow=nrow(binmatrix),ncol=nrow(freq_for_rules))
names <- colnames(binmatrix)
df_for_rules <- matrix(nrow=nrow(binmatrix),ncol=ncol(binmatrix))
for(i in 1:nrow(binmatrix)) {
for(j in 1:length(names)) {
if(binmatrix[i,j] == 1)
df_for_rules[i,j] = names[j]
}
}
df_for_rules <- as.data.frame(df_for_rules)
write.table(df_for_rules, file="~/transactions_10k_ay103.csv", row.names = FALSE, col.names = FALSE, sep=",")
# For 3D plots (hopefully)
# https://rpubs.com/swagatamdas03/507581
# https://irapoenya.wordpress.com/2020/10/04/rstudio-tutorial-an-intro-to-3d-plots/
# https://rdrr.io/rforge/arulesViz/man/plot.html
# https://github.com/mhahsler/arulesViz
# https://towardsdatascience.com/association-rules-2-aa9a77241654
#
library(arules)
library(arulesViz)
#--------------------------------------------------------------------------------------------
# Build and save rules for AY.4
transactions <- read.transactions("transactions_10k_ay103.csv", sep=",", rm.duplicates=TRUE)
summary(transactions)
items = rev(tail(sort(itemFrequency(transactions)), 91))
X11()
par(mar = c(10,5,10,5))
barplot(items, las=2, cex.names=0.8, col="gold")
# FINAL PARAMETERS ON OVERALL MATRIX!!!!!
# Minimum support of 0.01
# Minimum confidence of 0.8
# Maximum length of 4
#BOOKMARK
rules <- apriori(transactions, parameter = list(supp = 0.005, conf = 0.6, maxlen = 3))
rules <- sort(subset(rules, subset = (lift >= 1.1 | lift <= 0.9)), by="lift")
View(inspect( subset( rules, subset = rhs %pin% "ORF1a.G519S" )))
# FINAL PARAMETERS ON OVERALL MATRIX!!!!!
# Minimum support of 0.01
# Minimum confidence of 0.8
# Maximum length of 4
#BOOKMARK
rules <- apriori(transactions, parameter = list(supp = 0.001, conf = 0.7, maxlen = 4))
View(inspect( subset( rules, subset = rhs %pin% "ORF1a.G519S" )))
View(inspect( subset( rules, subset = rhs %pin% "ORF1a.S2695N" )))
library(readr)
metadata_humans_final_index <- read_csv("Documents/GitHub/AppliedStatisticsProject2022/data/original_dataset/metadata_humans_final_index.csv")
View(metadata_humans_final_index)
library(readr)
metadata_animals <- read_csv("Documents/GitHub/AppliedStatisticsProject2022/data/original_dataset/metadata_animals.csv")
View(metadata_animals)
library(readr)
metadata_animals <- read_csv("Documents/GitHub/AppliedStatisticsProject2022/data/original_dataset/metadata_animals.csv",
col_names = FALSE)
View(metadata_animals)
library(readr)
metadata_humans_final_index <- read_csv("Documents/GitHub/AppliedStatisticsProject2022/data/original_dataset/metadata_humans_final_index.csv")
View(metadata_humans_final_index)
remove(list = ls())
gc()
gc()
#--------------------------------------------------------------------------------------------
# Build and save rules for AY.4
transactions <- read.transactions("~/final_rules.csv", sep=",", rm.duplicates=TRUE)
# For 3D plots (hopefully)
# https://rpubs.com/swagatamdas03/507581
# https://irapoenya.wordpress.com/2020/10/04/rstudio-tutorial-an-intro-to-3d-plots/
# https://rdrr.io/rforge/arulesViz/man/plot.html
# https://github.com/mhahsler/arulesViz
# https://towardsdatascience.com/association-rules-2-aa9a77241654
#
library(arules)
library(arulesViz)
#--------------------------------------------------------------------------------------------
# Build and save rules for AY.4
transactions <- read.transactions("~/final_rules.csv", sep=",", rm.duplicates=TRUE)
# FINAL PARAMETERS ON OVERALL MATRIX!!!!!
# Minimum support of 0.01
# Minimum confidence of 0.8
# Maximum length of 4
#BOOKMARK
rules <- apriori(transactions, parameter = list(supp = 0.01, conf = 0.8, maxlen = 4))
# FINAL PARAMETERS ON OVERALL MATRIX!!!!!
# Minimum support of 0.01
# Minimum confidence of 0.8
# Maximum length of 4
#BOOKMARK
rules <- apriori(transactions, parameter = list(supp = 0.01, conf = 0.9, maxlen = 4))
# FINAL PARAMETERS ON OVERALL MATRIX!!!!!
# Minimum support of 0.01
# Minimum confidence of 0.8
# Maximum length of 4
#BOOKMARK
rules <- apriori(transactions, parameter = list(supp = 0.05, conf = 0.9, maxlen = 4))
# FINAL PARAMETERS ON OVERALL MATRIX!!!!!
# Minimum support of 0.01
# Minimum confidence of 0.8
# Maximum length of 4
#BOOKMARK
rules <- apriori(transactions, parameter = list(supp = 0.001, conf = 0.9, maxlen = 4))
# FINAL PARAMETERS ON OVERALL MATRIX!!!!!
# Minimum support of 0.01
# Minimum confidence of 0.8
# Maximum length of 4
#BOOKMARK
rules <- apriori(transactions, parameter = list(supp = 0.01, conf = 0.9, maxlen = 4))
# Scatter plot, hue is chosen by confidence (could be misleading)
X11()
plot(rules, measure = "confidence")
# Scatter plot, hue is chosen by lift (most significant I would say)
X11()
plot(rules)
# Two-key plot
X11()
plot(rules, method = "two-key plot")
# FINAL PARAMETERS ON OVERALL MATRIX!!!!!
# Minimum support of 0.01
# Minimum confidence of 0.8
# Maximum length of 4
#BOOKMARK
rules <- apriori(transactions, parameter = list(supp = 0.01, conf = 0.9, maxlen = 3))
# FINAL PARAMETERS ON OVERALL MATRIX!!!!!
# Minimum support of 0.01
# Minimum confidence of 0.8
# Maximum length of 4
#BOOKMARK
rules <- apriori(transactions, parameter = list(supp = 0.01, conf = 0.9, maxlen = 4))
# FINAL PARAMETERS ON OVERALL MATRIX!!!!!
# Minimum support of 0.01
# Minimum confidence of 0.8
# Maximum length of 4
#BOOKMARK
rules <- apriori(transactions, parameter = list(supp = 0.01, conf = 0.9, maxlen = 3))
plot(rules)
plot(rules, method = "two-key plot")
# Scatter plot, hue is chosen by lift (most significant I would say)
X11()
plot(rules)
# For 3D plots (hopefully)
# https://rpubs.com/swagatamdas03/507581
# https://irapoenya.wordpress.com/2020/10/04/rstudio-tutorial-an-intro-to-3d-plots/
# https://rdrr.io/rforge/arulesViz/man/plot.html
# https://github.com/mhahsler/arulesViz
# https://towardsdatascience.com/association-rules-2-aa9a77241654
#
library(arules)
library(arulesViz)
#--------------------------------------------------------------------------------------------
# Build and save rules for AY.4
transactions <- read.transactions("~/ay103.csv", sep=",", rm.duplicates=TRUE)
summary(transactions)
items = rev(tail(sort(itemFrequency(transactions)), 91))
X11()
par(mar = c(10,5,10,5))
barplot(items, las=2, cex.names=0.8, col="gold")
# FINAL PARAMETERS ON OVERALL MATRIX!!!!!
# Minimum support of 0.01
# Minimum confidence of 0.8
# Maximum length of 4
#BOOKMARK
rules <- apriori(transactions, parameter = list(supp = 0.01, conf = 0.9, maxlen = 3))
View(rules)
View(inspect(rules))
View(inspect(rules))
View(inspect( subset( rules, subset = rhs %pin% "ORF1a.G519S" )))
# FINAL PARAMETERS ON OVERALL MATRIX!!!!!
# Minimum support of 0.01
# Minimum confidence of 0.8
# Maximum length of 4
#BOOKMARK
rules <- apriori(transactions, parameter = list(supp = 0.001, conf = 0.8, maxlen = 3))
View(inspect( subset( rules, subset = rhs %pin% "ORF1a.G519S" )))
View(inspect( subset( rules, subset = rhs %pin% "S.D80Y" )))
View(inspect( subset( rules, subset = rhs %pin% "ORF1a.S2695N" )))
View(inspect( subset( rules, subset = rhs %pin% "ORF8.P36S" )))
create_mutations_set_lineages <- function(df1, df2) {
# Select column names a.k.a mutations from each set
mutations1 <- colnames(df1)
mutations2 <- colnames(df2)
# Compute the union of these sets
mutation_set <- union(mutations1, mutations2)
# Compute the set difference between the whole set of mutations and each lineage's mutation set
diff1 <- setdiff(mutation_set, mutations1)
diff2 <- setdiff(mutation_set, mutations2)
# For each mutation in diff1 add a column of zeroes, in this way we make the matrices homogeneous
for(mutation in diff1) {
# Binding of the column of zeroes
df1 <- cbind(df1, integer(nrow(df1)))
# We rename the variable
names(df1)[length(names(df1))] <- mutation
}
for(mutation in diff2) {
df2 <- cbind(df2, integer(nrow(df2)))
names(df2)[length(names(df2))] <- mutation
}
# We sort the columns alphabetically to make the matrices fully homogeneous
df1 <- df1[,sort(names(df1))]
df2 <- df2[,sort(names(df2))]
# All of this allows us to use rbind
return(rbind(df1,df2))
}
# For B.1.1.7
b117 <- read.csv("Documents/GitHub/AppliedStatisticsProject2022/data/lineages/B.1.1.7/binmatrix_b117.csv")
b117shuffle <- b117[sample(nrow(b117)),]
b117shuffle <- b117shuffle[sample(nrow(b117)),]
b117_topk <- b117shuffle[1:1600,-c(2,3)]
remove(b117, b117shuffle)
gc()
# For AY.4
ay4 <- read.csv("Documents/GitHub/AppliedStatisticsProject2022/data/lineages/AY.4/binmatrix_ay4.csv")
ay4shuffle <- ay4[sample(nrow(ay4)),]
ay4shuffle <- ay4[sample(nrow(ay4)),]
ay4_topk <- ay4shuffle[1:1600,-c(2,3)]
remove(ay4, ay4shuffle)
gc()
# For BA.1
ba1 <- read.csv("Documents/GitHub/AppliedStatisticsProject2022/data/lineages/BA.1/binmatrix_ba1.csv")
ba1shuffle <- ba1[sample(nrow(ba1)),]
ba1shuffle <- ba1[sample(nrow(ba1)),]
ba1_topk <- ba1shuffle[1:1600,-c(2,3)]
remove(ba1, ba1shuffle)
gc()
# For BA.1.1
ba11 <- read.csv("Documents/GitHub/AppliedStatisticsProject2022/data/lineages/BA.1.1/binmatrix_ba11.csv")
ba11shuffle <- ba11[sample(nrow(ba11)),]
ba11shuffle <- ba11[sample(nrow(ba11)),]
ba11_topk <- ba11shuffle[1:1600,-c(2,3)]
remove(ba11, ba11shuffle)
gc()
# For AY.103
ay103 <- read_csv("Documents/GitHub/AppliedStatisticsProject2022/data/lineages/AY.103/binmatrix_ay103.csv")
ay103shuffle <- ay103[sample(nrow(ay103)),]
ay103shuffle <- ay103[sample(nrow(ay103)),]
ay103_topk <- ay103shuffle[1:1600,-c(2,3)]
remove(ay103, ay103shuffle)
gc()
b117_topk$clade <- "20I (Alpha)"
ay103_topk$clade <- "21J (Delta)"
ay4_topk$clade <- "21J (Delta)"
ba1_topk$clade <- "21K (Omicron)"
ba11_topk$clade <- "21K (Omicron)"
binmatrix <- create_mutations_set_lineages(ay4_topk, b117_topk)
binmatrix <- create_mutations_set_lineages(binmatrix, ay103_topk)
binmatrix <- create_mutations_set_lineages(binmatrix, ba11_topk)
binmatrix <- create_mutations_set_lineages(binmatrix, ba1_topk)
ay103_topk$clade <- "21J (Delta)"
b117_topk$clade <- "20I (Alpha)"
ay103_topk$clade <- "21J (Delta)"
ay4_topk$clade <- "21J (Delta)"
ba1_topk$clade <- "21K (Omicron)"
ba11_topk$clade <- "21K (Omicron)"
# For AY.103
ay103 <- read_csv("Documents/GitHub/AppliedStatisticsProject2022/data/lineages/AY.103/binmatrix_ay103.csv")
# For AY.103
ay103 <- read.csv("Documents/GitHub/AppliedStatisticsProject2022/data/lineages/AY.103/binmatrix_ay103.csv")
ay103shuffle <- ay103[sample(nrow(ay103)),]
ay103shuffle <- ay103[sample(nrow(ay103)),]
ay103_topk <- ay103shuffle[1:1600,-c(2,3)]
remove(ay103, ay103shuffle)
gc()
b117_topk$clade <- "20I (Alpha)"
ay103_topk$clade <- "21J (Delta)"
ay4_topk$clade <- "21J (Delta)"
ba1_topk$clade <- "21K (Omicron)"
ba11_topk$clade <- "21K (Omicron)"
binmatrix <- create_mutations_set_lineages(ay4_topk, b117_topk)
binmatrix <- create_mutations_set_lineages(binmatrix, ay103_topk)
binmatrix <- create_mutations_set_lineages(binmatrix, ba11_topk)
binmatrix <- create_mutations_set_lineages(binmatrix, ba1_topk)
forpc <- binmatrix[,c(-1,-3)]
distance_mat <- dist(forpc, method = 'euclidean')
Hierar_cl <- hclust(distance_mat, method = "ward.D")
X11()
plot(Hierar_cl)
scores <- pc$scores[,1:4]
pc <- princomp(forpc, scores=T)
scores <- pc$scores[,1:4]
for(i in 1:ncol(scores))
scores[,i] <- scores[,i] + rnorm(nrow(scores), sd=0.025)
# Now let's color them based on the clustering
fit <- cutree(Hierar_cl, k = 3)
X11()
pairs(scores, col = factor(fit),main ="Pairs plot PCA", oma=c(3,3,3,15))
pairs(scores, col = factor(binmatrix$clade),main ="Pairs plot PCA", oma=c(3,3,3,15))
X11()
pairs(scores, col = factor(binmatrix$clade),main ="Pairs plot PCA", oma=c(3,3,3,15))
dev.off()
dev.off()
X11()
pairs(scores, col = factor(binmatrix$clade),main ="Pairs plot PCA")
create_mutations_set_lineages <- function(df1, df2) {
# Select column names a.k.a mutations from each set
mutations1 <- colnames(df1)
mutations2 <- colnames(df2)
# Compute the union of these sets
mutation_set <- union(mutations1, mutations2)
# Compute the set difference between the whole set of mutations and each lineage's mutation set
diff1 <- setdiff(mutation_set, mutations1)
diff2 <- setdiff(mutation_set, mutations2)
# For each mutation in diff1 add a column of zeroes, in this way we make the matrices homogeneous
for(mutation in diff1) {
# Binding of the column of zeroes
df1 <- cbind(df1, integer(nrow(df1)))
# We rename the variable
names(df1)[length(names(df1))] <- mutation
}
for(mutation in diff2) {
df2 <- cbind(df2, integer(nrow(df2)))
names(df2)[length(names(df2))] <- mutation
}
# We sort the columns alphabetically to make the matrices fully homogeneous
df1 <- df1[,sort(names(df1))]
df2 <- df2[,sort(names(df2))]
# All of this allows us to use rbind
return(rbind(df1,df2))
}
# For AY.103
ay103 <- read.csv("Documents/GitHub/AppliedStatisticsProject2022/data/lineages/AY.103/binmatrix_ay103.csv")
ay103shuffle <- ay103[sample(nrow(ay103)),]
ay103shuffle <- ay103[sample(nrow(ay103)),]
ay103_topk <- ay103shuffle[1:10000,-c(2,3)]
rownames(ay103_topk) <- NULL
remove(ay103, ay103shuffle)
gc()
View(ay103_topk)
View(ay103_topk)
binmatrix <- ay103_topk
View(binmatrix)
forpc <- binmatrix[,-1]
pc <- princomp(forpc, score =T)
summary(pc)
distance_mat <- dist(ay103_clust, method = 'euclidean')
# We perform hierarchical clustering with Ward Linkage
ay103_clust <- ay103_topk[,-1]
distance_mat <- dist(ay103_clust, method = 'euclidean')
Hierar_cl <- hclust(distance_mat, method = "ward.D")
fit <- cutree(Hierar_cl, k = 5 )
# Do we see any special characteristics in the clusters?
# We plot the mutation frequencies barplots
mutation_frequencies_bis <- function(binmatrix) {
freq <-  as.data.frame(matrix(nrow=ncol(binmatrix),ncol=2))
colnames(freq) <- c("mutation", "frequency")
for(i in 1:ncol(binmatrix)) {
freq[i,1] <- colnames(binmatrix)[i]
freq[i,2] <- sum(binmatrix[,i] == 1)/nrow(binmatrix)
}
return(freq)
}
# Now let's color them based on the clustering
fit <- cutree(Hierar_cl, k = 5)
freq <- mutation_frequencies_bis(forpc)
freq <- freq[order(freq$frequency, decreasing = T),]
X11()
par(mar=c(10,5,10,5))
barplot(height = freq$frequency, names = freq$mutation, las = 2, ylab="mutation percentage", main="Barplot of mutation frequencies in AY.103")
cluster1 <- forpc[fit == 1,]
cluster1
freq1 <- mutation_frequencies_bis(cluster1)
freq1 <- freq1[match(freq$mutation, freq1$mutation),]
#freq1 <- freq1[order(freq1$frequency, decreasing = T),]
X11()
par(mar=c(10,5,10,5))
barplot(height = freq1$frequency, names = freq1$mutation, las = 2, ylab="mutation percentage", main="Barplot cluster 1 in AY.103")
cluster1 <- forpc[fit == 2,]
cluster1
freq1 <- mutation_frequencies_bis(cluster1)
freq1 <- freq1[match(freq$mutation, freq1$mutation),]
par(mar=c(10,5,10,5))
barplot(height = freq1$frequency, names = freq1$mutation, las = 2, ylab="mutation percentage", main="Barplot cluster 2 in AY.103")
#freq1 <- freq1[order(freq1$frequency, decreasing = T),]
X11()
par(mar=c(10,5,10,5), mfrow=c(1,2))
barplot(height = freq$frequency, names = freq$mutation, las = 2, ylab="mutation percentage", main="Barplot of mutation frequencies in AY.103")
cluster1 <- forpc[fit == 2,]
cluster1
freq1 <- mutation_frequencies_bis(cluster1)
freq1 <- freq1[match(freq$mutation, freq1$mutation),]
barplot(height = freq1$frequency, names = freq1$mutation, las = 2, ylab="mutation percentage", main="Barplot cluster 2 in AY.103")
q()
remove(list = ls()
)
library(car)
library(rgl)
library(mvtnorm)
library(MASS)
library(class)
library(e1071)
setwd("~/Documents/wireless_project/second_capture/processed")
#browsing <- read.csv("processed_browsing.csv", stringsAsFactors = T)
#idle <- read.csv("processed_idle.csv", stringsAsFactors = T)
#instagram <- read.csv("processed_instagram.csv", stringsAsFactors = T)
#netflix <- read.csv("processed_netflix.csv", stringsAsFactors = T)
#spotify <- read.csv("processed_spotify.csv", stringsAsFactors = T)
videocall <- read.csv("processed_videocall.csv", stringsAsFactors = T)
voip <- read.csv("processed_voip.csv", stringsAsFactors = T)
youtube <- read.csv("processed_youtube.csv", stringsAsFactors = T)
# This is the final dataset
#dataset <- rbind(browsing, idle, instagram, netflix, spotify, videocall, voip, youtube)
dataset <- rbind(videocall, voip, youtube)
# We look at the boxplot per column to study the variance
notype <- dataset[,1:11]
X11()
boxplot(notype, col = 'yellow')
# The data isn't centered, we center the data around its mean
notype <- scale(notype, scale = FALSE)
boxplot(notype, col = 'yellow')
# We standardize the data because of the variance of one of the features
notype <- scale(notype)
boxplot(notype, col = 'yellow')
# We compute the principal components and also the scores
pc <- princomp(notype, scores = T)
summary(pc)
plot(cumsum(pc$sd^2)/sum(pc$sd^2), type='b', axes=F, xlab='number of components',
ylab='contribution to the total variance', ylim=c(0,1))
abline(h=1, col='blue')
abline(h=0.8, lty=2, col='blue')
box()
axis(2,at=0:10/10,labels=0:10/10)
pc$loadings
pc$loadings[1]
pc$loadings[1,]
pc$loadings[,1]
load1 <- pc$loadings[,1]
load1
sample1 <- dataset[1:2]
sample1 <- dataset[1:2,]
sample1
sample1 <- dataset[1:2,-12]
sample1
sample1 %*% load1
as.matrix(sample1)
as.matrix(load1)
as.matrix(sample1) %*% as.matrix(load())
as.matrix(sample1) %*% as.matrix(load1
as.matrix(sample1) %*% as.matrix(load1)
as.matrix(train[1:2,]) %*% as.matrix(load1)
train
#################################################################
#         Training our classifier
#################################################################
# Next step -> shuffle data and extract 70% for testing
shuffled <- dataset[sample(1:nrow(dataset)),]
train <- shuffled[1:(floor(0.65*nrow(shuffled))),]
test_traffic <- shuffled[(nrow(train) + 1):nrow(shuffled),]
# Normalize training data
notype <- scale(train[,1:11])
as.matrix(notype[1:2,]) %*% as.matrix(load1)
